---

# This playbook interacts with the bastion and master node.

# It installs the user's OKD-specific tools and files
# on the Bastion node, which can also be the Master if the Master
# is acting as a Bastion.

# -----------------------------------------------------------------------------

  # Paths are relative to this (ansible/bastion) directory...

- hosts: bastion
  gather_facts: no
  vars:
    setenv_file: ../../provider-env/setenv.sh
    user_cert_file: >-
      {{ deployments_directory }}/{{ deployment_name }}/certificates/cert.crt
    vault_password_file: >-
      {{ deployments_directory }}/{{ deployment_name }}/vault-pass.txt

  tasks:

  # --------
  # Preamble
  # --------

  # The user's 'setenv.sh' file is important.
  # if it does not exist we must not continue...

  - name: Get status of setenv.sh
    stat:
      path: "{{ setenv_file }}"
    register: setenv
    delegate_to: localhost
    changed_when: False

  - name: Assert setenv.sh exists
    fail:
      msg: "Your setenv.sh is missing"
    when: not setenv.stat.exists

  #Â OK - we have a setenv.sh...
  # Wait for the the host...

  - name: Wait for SSH
    wait_for:
      host: "{{ ansible_ssh_host }}"
      port: 22
      search_regex: OpenSSH
      delay: 5
    vars:
      ansible_connection: local

  - name: Gathering facts
    setup:

  - name: Create directories
    file:
      path: "{{ ansible_env.HOME }}/{{ item }}"
      state: directory
      mode: 0755
    loop:
    - .ansible/tmp
    - okd-orchestrator/okd/inventories/{{ inventory_dir }}

  - name: Install system packages
    yum:
      name: "{{ item }}"
      state: present
    loop:
    - libselinux-python
    - python-passlib
    become: yes

  # Add files...

  - name: Copy requirements
    copy:
      src: files/requirements.txt
      dest: /tmp/
    become: yes

  - name: Install SSH private key
    copy:
      src: "../../{{ keypair_name }}"
      dest: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      mode: 0600

  # Create ~/.ssh/config
  - name: Create SSH config
    copy:
      src: "files/ssh-config"
      dest: "{{ ansible_env.HOME }}/.ssh/config"
      mode: 0400

  # The path to the file
  # is relative to this (ansible/bastion) directory.
  - name: Install setenv.sh (as okd.sh)
    copy:
      src: "{{ setenv_file }}"
      dest: /etc/profile.d/okd.sh
      mode: 0644
    become: yes

  - name: Remove TF_VAR_deployments_directory from okd.sh
    lineinfile:
      path: /etc/profile.d/okd.sh
      regexp: '^export TF_VAR_deployments_directory=.*$'
      state: absent
    become: yes

  - name: Uninstall any existing Ansible
    pip:
      name: ansible
      state: absent
    become: yes

  - name: Install Python Modules
    pip:
      requirements: /tmp/requirements.txt
      state: forcereinstall
    become: yes

  # ---------------------
  # Copy the Orchestrator
  # ---------------------

  # Here we copy crucial parts of the orchestrator to the Bastion.
  # We will checkout the OpenShift Ansible repository directly on the bastion
  # when `create.py` is run so we just copy common directories here.
  - name: Copy orchestrator directories
    copy:
      src: "../../{{ item }}/"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/{{ item }}"
    loop:
      - ansible
      - utils

  - name: Copy orchestrator files
    copy:
      src: "../../{{ item }}"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/{{ item }}"
    loop:
      - okd/ansible.cfg
      - okd/inventories/{{ inventory_dir }}/inventory.yaml

  # Create the deployment directory
  - name: Create deployments directory
    file:
      path: "{{ ansible_env.HOME }}/okd-orchestrator/deployments"
      state: directory
      owner: "{{ cluster_ssh_user }}"
      group: "{{ cluster_ssh_user }}"
      mode: 0755
    become: yes

  # Copy the deployment (default or user)
  - name: Copy deployment
    copy:
      src: "{{ deployments_directory }}/{{ deployment_name }}"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/deployments/"

  # Now the executable parts of the Orchestrator
  - name: Copy orchestrator modules
    copy:
      src: "../../{{ item }}"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/{{ item }}"
      mode: 0755
    loop:
      - create.py

  # Optional user-provided certificate information.
  #          -------------
  #
  # This block runs if the user has provided their own SSL certificate files.
  # Certificates files are expected in a directory called 'certificates'
  # in the user's deployment directory. The following (vault-encrypted) files
  # must exist:
  #
  # - private.key
  # - cert.crt
  # - caBundle.crt
  #
  # If there's a cert.crt file then we'll assume all the files exist.
  #
  # Note: If the user is providing their own SSL certificates they must be
  #       encrypted using ansible vault and the encryption  password must be
  #       present in the root of the user's deployment directory in the file
  #       'vault-pass.txt'

  - name: Get status of user certificates (cert.crt)
    stat:
      path: "{{ user_cert_file }}"
    register: user_cert
    delegate_to: localhost
    changed_when: False

  - name: Get status of certificate vault password file (vault-pass.txt)
    stat:
      path: "{{ vault_password_file }}"
    register: vault_password
    delegate_to: localhost
    when: user_cert.stat.exists

  - name: Assert vault password file (vault-pass.txt)
    assert:
      that: vault_password.stat.exists
    when: user_cert.stat.exists

  - name: Copy user certificates
    copy:
      src: "{{ item }}"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/"
      mode: 0644
    loop:
    - "{{ user_cert_file }}"
    - "{{ deployments_directory}}/{{ deployment_name }}/certificates/private.key"
    - "{{ deployments_directory}}/{{ deployment_name }}/certificates/ca-bundle.crt"
    when: user_cert.stat.exists

# -----------------------------------------------------------------------------

- hosts: cli-node
  gather_facts: no

  tasks:

  # --------
  # Preamble
  # --------

  # Wait for the the host...
  - name: Wait for SSH
    wait_for:
      host: "{{ ansible_ssh_host }}"
      port: 22
      search_regex: OpenSSH
      delay: 5
    vars:
      ansible_connection: local
    when:
      - master_cert_email is defined

  - name: Gathering facts
    setup:
    when:
      - master_cert_email is defined

  # ---------------------------
  # Generate an SSL certificate
  # ---------------------------
  # We do this if the master_cert_email is defined
  # (which is normally true if the okd.certificates.generate_api_cert property
  # is set).
  #
  # The master's 'public_hostname' is located in the deployment configuration
  # and the certbot registration email is expected to be set in the
  # user's 'setenv.sh'

  - name: Install certbot
    yum:
      name: "{{ item }}"
      state: present
    loop:
      - epel-release
      - certbot
    become: yes
    when:
      - master_cert_email is defined

  - name: Look for exisiting certificate directory
    stat:
      path: /etc/letsencrypt/live/{{ public_hostname }}
    register: cert_result
    become: yes
    when:
      - master_cert_email is defined

  - name: Generate master SSL certificate
    shell: >
      certbot certonly --standalone -d {{ public_hostname }}
      --agree-tos -n -m {{ master_cert_email }}
    become: yes
    when:
      - master_cert_email is defined
      - cert_result.stat.exists == false
