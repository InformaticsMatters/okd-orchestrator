---

# This playbook interacts with the bastion and master node.

# It installs the user's OpenShift-specific tools and files
# assuming a base Bastion image is being used on the cloud-provider.

# -----------------------------------------------------------------------------

- hosts: bastion
  gather_facts: no

  tasks:

  # --------
  # Preamble
  # --------

  # Wait for the the host...
  - name: Wait for SSH
    wait_for:
      host: "{{ ansible_ssh_host }}"
      port: 22
      search_regex: OpenSSH
      delay: 5
    vars:
      ansible_connection: local

  - name: Gathering facts
    setup:

  - name: Create directories
    file:
      path: "{{ ansible_env.HOME }}/{{ item }}"
      state: directory
      mode: 0755
    loop:
    - .ansible/tmp
    - okd-orchestrator

  - name: Install system packages
    yum:
      name: "{{ item }}"
      state: present
    loop:
    - libselinux-python
    become: yes

  # Add files...

  - name: Copy requirements
    copy:
      src: files/requirements.txt
      dest: /tmp/

  - name: Install SSH private key
    copy:
      src: "../../{{ keypair_name }}"
      dest: "{{ ansible_env.HOME }}/.ssh/id_rsa"
      mode: 0600

  # Create ~/.ssh/config
  - name: Create SSH config
    copy:
      src: "files/ssh-config"
      dest: "{{ ansible_env.HOME }}/.ssh/config"
      mode: 0400

  # The path to the deployment-specific directory
  # is relative to this (ansible/bastion) directory.
  - name: Install bastion.sh
    copy:
      src: "bastion.sh"
      dest: "/etc/profile.d/okd.sh"
      mode: 0644
    become: yes

  - name: Install Python Modules
    pip:
      requirements: /tmp/requirements.txt
    become: yes

  # ---------------------
  # Copy the Orchestrator
  # ---------------------

  # Here we copy crucial parts of the orchestrator to the Bastion.
  # We will checkout the OpenShift Ansible repository directly on the bastion
  # when `create.py` is run so we just copy crucial files and directories here.
  - name: Copy orchestrator directories
    copy:
      src: "../../{{ item }}/"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/{{ item }}"
    loop:
      - ansible
      - okd
      - utils

  # Create the deployment directory
  - name: Create deployments directory
    file:
      path: "{{ deployments_directory }}"
      state: directory
      owner: centos
      group: centos
      mode: 0755
    become: yes
    when: deployments_directory is defined

  # Copy the deployment (default or user)
  - name: Copy deployment file (from OKD Orchestrator)
    copy:
      src: "../../deployments/{{ deployment_name }}.yaml"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/deployments/"
    when: deployments_directory is not defined

  - name: Copy deployment file (from user)
    copy:
      src: "{{ deployments_directory }}/{{ deployment_name }}.yaml"
      dest: "{{ deployments_directory }}/"
    when: deployments_directory is defined

  # Now the executable parts of the Orchestrator
  - name: Copy orchestrator modules
    copy:
      src: "../../{{ item }}"
      dest: "{{ ansible_env.HOME }}/okd-orchestrator/{{ item }}"
      mode: 0755
    loop:
      - create.py

# -----------------------------------------------------------------------------

- hosts: master1
  gather_facts: no

  tasks:

  # --------
  # Preamble
  # --------

  # Wait for the the host...
  - name: Wait for SSH
    wait_for:
      host: "{{ ansible_ssh_host }}"
      port: 22
      search_regex: OpenSSH
      delay: 5
    vars:
      ansible_connection: local

  - name: Gathering facts
    setup:

  # ---------------------------
  # Generate an SSL certificate
  # ---------------------------
  # We do this if the master_cert_email is defined
  # (which is true if the okd.certificates.generate_api_cert property is set).
  # The master's 'public_hostname' is located in the deployment configuration
  # and the certbot registration email is expected to be set in the
  # user's 'setenv.sh'

  - name: Install certbot
    yum:
      name: "{{ item }}"
      state: present
    loop:
      - epel-release
      - certbot
    become: yes
    when:
      - master_cert_email is defined

  - name: Look for exisiting certificate directory
    stat:
      path: /etc/letsencrypt/live/{{ public_hostname }}
    register: cert_result
    become: yes
    when:
      - master_cert_email is defined

  - name: Generate master SSL certificate
    shell: >
      certbot certonly --standalone -d {{ public_hostname }}
      --agree-tos -n -m {{ master_cert_email }}
    become: yes
    when:
      - master_cert_email is defined
      - cert_result.stat.exists == false
